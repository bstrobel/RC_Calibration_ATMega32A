
AVRASM ver. 2.1.57  C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\RC_Calibration.asm Sat Dec 05 10:06:34 2015

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.91\avrasm\inc\m32adef.inc'
C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\RC_Calibration.asm(54): Including file 'C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\Device specific\m32.asm'
C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\Device specific\m32.asm(17): Including file 'C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\Common\memoryMap.inc'
C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\Device specific\m32.asm(18): Including file 'C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\Device specific\m16_family_pinout.inc'
C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\RC_Calibration.asm(95): Including file 'C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\Interface specific\jtag_interface.inc'
C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\RC_Calibration.asm(115): Including file 'C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\common\macros.inc'
C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\RC_Calibration.asm(116): Including file 'C:\Users\Bernd\Desktop\Scheiﬂ\Calibration of the internal RC oscillator - AVR053\code\common\main.asm'
                 
                 ;*****************************************************************
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32Adef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32A
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32A
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32ADEF_INC_
                 #define _M32ADEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega32A
                 #pragma AVRPART ADMIN PART_NAME ATmega32A
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x02
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler bits
                 .equ	TWPS1	= 1	; TWI Prescaler bits
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x085f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M32ADEF_INC_ */
                 
                 
                 ;*
                 ;* - Description:  Code is capable of calibrating the RC 
                 ;*                 oscillator of an AVR with tunable oscillator 
                 ;*                 and ISP or JTAG interface.
                 ;*
                 ;*
                 ;* - File:         RC_Calibration.asm
                 ;* - AppNote:      AVR053 - Production calibration of the
                 ;*                          RC oscillator
                 ;*
                 ;* - Author:       Atmel Corporation: http://www.atmel.com
                 ;*                 Support email: avr@atmel.com
                 ;*
                 ;* $Name$
                 ;* $Revision: 61 $
                 ;* $RCSfile$
                 ;* $Date: 2006-03-23 11:14:13 +0100 (to, 23 mar 2006) $
                 ;*****************************************************************
                 
                 
                 ;*****************************************************************
                 ;* Include the matching device and assemble the project
                 ;*****************************************************************
                 ;* Tiny AVR ******************************************************
                 ;.include "Device specific\t12.asm"
                 ;.include "Device specific\t13.asm"
                 ;.include "Device specific\t15.asm"
                 ;.include "Device specific\t2313.asm"
                 ;.include "Device specific\t25.asm"
                 ;.include "Device specific\t45.asm"
                 ;.include "Device specific\t85.asm"
                 ;.include "Device specific\t24.asm"
                 ;.include "Device specific\t44.asm"
                 ;.include "Device specific\t84.asm"
                 ;.include "Device specific\t26.asm"
                 ;.include "Device specific\t261.asm"
                 ;.include "Device specific\t461.asm"
                 ;.include "Device specific\t861.asm"
                 ;* Mega AVR ******************************************************
                 ;.include "Device specific\m48.asm"
                 ;.include "Device specific\m88.asm"
                 ;.include "Device specific\m168.asm"
                 ;.include "Device specific\m164P.asm"
                 ;.include "Device specific\m324P.asm"
                 ;.include "Device specific\m644.asm"
                 ;.include "Device specific\m8.asm"
                 ;.include "Device specific\m8515.asm"
                 ;.include "Device specific\m8535.asm"
                 ;.include "Device specific\m16.asm"
                 ;.include "Device specific\m162.asm"
                 ;.include "Device specific\m165.asm"
                 ;.include "Device specific\m165P.asm"
                 .include "Device specific\m32.asm"
                 
                 ;* - Description:  Device definition file for RC Calibration
                 ;* - File:         m32.asm
                 ;* - AppNote:      AVR053 - Production calibration of the
                 ;*                          RC oscillator
                 ;*
                 ;* - Author:       Atmel Corporation: http://www.atmel.com
                 ;*                 Support email: avr@atmel.com
                 ;*
                 ;* $Name$
                 ;* $Revision: 56 $
                 ;* $RCSfile$
                 ;* $Date: 2006-02-16 17:44:45 +0100 (to, 16 feb 2006) $
                 ;*****************************************************************
                 
                 ;.include "m32def.inc"
                 .include "Common\memoryMap.inc"
                 
                 ;*
                 ;* - Description:  Code is part of the RC_Calibration.asm source
                 ;*
                 ;* - File:         memoryMap.inc
                 ;* - AppNote:      AVR053 - Production calibration of the
                 ;*                          RC oscillator
                 ;*
                 ;* - Author:       Atmel Corporation: http://www.atmel.com
                 ;*                 Support email: avr@atmel.com
                 ;*
                 ;* $Name$
                 ;* $Revision: 3901 $
                 ;* $RCSfile$
                 ;* $Date: 2008-04-30 14:31:21 +0200 (on, 30 apr 2008) $
                 ;*****************************************************************
                 
                 .equ	ADDR_START		= 0x0000
                 .equ	ADDR_MAIN		= 0x000A
                 
                 .equ	EEPROM_ADDRESS	= 0x00
                 .include "Device specific\m16_family_pinout.inc"
                 
                 ;* - Description:  Device definition file for RC Calibration
                 ;* - File:         m16_family_pinout.inc
                 ;* - AppNote:      AVR053 - Production calibration of the
                 ;*                          RC oscillator
                 ;*
                 ;* - Author:       Atmel Corporation: http://www.atmel.com
                 ;*                 Support email: avr@atmel.com
                 ;*
                 ;* $Name$
                 ;* $Revision: 56 $
                 ;* $RCSfile$
                 ;* $Date: 2006-02-16 17:44:45 +0100 (to, 16 feb 2006) $
                 ;*****************************************************************
                 
                 .equ	ISP_CAL_PORT_REG	= PORTB
                 .equ	ISP_CAL_DDR_REG		= DDRB
                 .equ	ISP_CAL_PIN_REG		= PINB
                 
                 .equ	ISP_CAL_MISO		= PB6
                 .equ	ISP_CAL_MOSI		= PB5
                 
                 .equ	JTAG_CAL_PORT_REG 	= PORTC
                 .equ	JTAG_CAL_DDR_REG 	= DDRC
                 .equ	JTAG_CAL_PIN_REG 	= PINC
                 
                 .equ	JTAG_CAL_MOSI		= PC5	;TDI
                 .equ	JTAG_CAL_MISO		= PC4	;TDO
                 
                 .equ OSC_VER	= 3
                 ;.include "Device specific\m325.asm"
                 ;.include "Device specific\m3250.asm"
                 ;.include "Device specific\m645.asm"
                 ;.include "Device specific\m6450.asm"
                 ;.include "Device specific\m64.asm"
                 ;.include "Device specific\m128.asm"
                 ;.include "Device specific\m640.asm"
                 ;.include "Device specific\m1280.asm"
                 ;.include "Device specific\m1281.asm"
                 ;.include "Device specific\m2560.asm"
                 ;.include "Device specific\m2561.asm"
                 ;* LCD AVR *******************************************************
                 ;.include "Device specific\m169.asm"  ; Note that m169(rev.A-E) &
                 ;.include "Device specific\m169P.asm" ; m169P have different osc
                 ;.include "Device specific\m329.asm"
                 ;.include "Device specific\m3290.asm"
                 ;.include "Device specific\m649.asm"
                 ;.include "Device specific\m6490.asm"
                 ;* CAN AVR *******************************************************
                 ;.include "Device specific\can128.asm"
                 ;.include "Device specific\can64.asm"
                 ;.include "Device specific\can32.asm"
                 ;* LIGHTNING AVR *************************************************
                 ;.include "Device specific\pwm3.asm"
                 ;.include "Device specific\pwm2.asm"
                 ;* BATTERY AVRs **************************************************
                 ;.include "Device specific\m406.asm"  ; JTAG only. 1 MHz osc.
                 ;* MATURE AVRs ***************************************************
                 ;.include "Device specific\m163.asm"
                 ;.include "Device specific\m323.asm"
                 ;*****************************************************************
                 
                 
                 ;*****************************************************************
                 ;* Include the file for the interface the the calibration should 
                 ;* be performed on
                 ;*****************************************************************
                 ;.include "Interface specific\isp_STK500_interface.inc"
                 ;.include "Interface specific\isp_AVRISP_interface.inc"
                 ;.include "Interface specific\isp_AVRISP_mkII_interface.inc"
                 .include "Interface specific\jtag_interface.inc"
                 
                 ;*
                 ;* - Description:  JTAGICE (mkI) interface definition file for 
                 ;*                 RC Calibration
                 ;*
                 ;* - File:         jtag_interface.inc
                 ;* - AppNote:      AVR053 - Production calibration of the
                 ;*                          RC oscillator
                 ;*
                 ;* - Author:       Atmel Corporation: http://www.atmel.com
                 ;*                 Support email: avr@atmel.com
                 ;*
                 ;* $Name$
                 ;* $Revision: 3901 $
                 ;* $RCSfile$
                 ;* $Date: 2008-04-30 14:31:21 +0200 (on, 30 apr 2008) $
                 ;*****************************************************************
                 
                 .EQU	JTAG_CALIB = 1
                 
                 ;*****************************************************************
                 ;*	Specify Calibration clock frequency
                 ;*****************************************************************
                 .EQU	CALIB_CLOCK_FREQ	= 32623	;Calibration Clock frequency in Hz
                 									;7.3728MHz/(2*113) CHANGE WITH CARE
                 
                 ;*****************************************************************
                 ;*	Pin and port definitions
                 ;*****************************************************************
                 .EQU	MISO 		= JTAG_CAL_MISO
                 .EQU	MOSI		= JTAG_CAL_MOSI
                 
                 .EQU	CAL_PORT	= JTAG_CAL_PORT_REG
                 .EQU	CAL_DDR		= JTAG_CAL_DDR_REG
                 .EQU	CAL_PIN		= JTAG_CAL_PIN_REG
                 
                 ;*****************************************************************
                 ;*	Macro used to disable and enable JTAG functions as these 
                 ;*	override IO functions. Macro contains nop if not using JTAG.
                 ;*****************************************************************
                 .MACRO	OPEN_INTERFACE_ACCESS
                 	ldi	@0, 1<<JTD
                 	out	MCUCSR, @0
                 	out	MCUCSR, @0
                 .ENDMACRO
                 
                 .MACRO	CLOSE_INTERFACE_ACCESS
                 	ldi	@0, ~(1<<JTD)
                 	out	MCUCSR, @0
                 	out	MCUCSR, @0
                 .ENDMACRO
                 
                 .MACRO	INTERFACE_BUGFIX
                 	nop
                 .ENDMACRO
                 ;.include "Interface specific\jtag_mkII_interface.inc"
                 ;.include "Interface specific\jtag_mkII_isp_interface.inc"
                 
                 
                 ;*****************************************************************
                 ;*	Select Target frequency below
                 ;*****************************************************************
                 .equ	TARGET_FREQ	= 8007680 ;Desired frequency in Hz 
                                               ;(1000000 = 1MHz)
                 
                 ;*****************************************************************
                 ;*	Specify the desired accuracy (1% recommended)
                 ;*****************************************************************
                 .equ	ACCURACY	= 3		;In 1/10 percent (10 is 1%)
                 
                 
                 ;*****************************************************************
                 ;* Included main code...
                 ;*****************************************************************
                 .include "common\macros.inc"
                 
                 ;*
                 ;* - Description:  Source file from application note AVR001. 
                 ;*                 Defines a number of macros that makes it easier
                 ;*                 to access IO registers (and SRAM locations). 
                 ;*
                 ;* - File:         macros.inc
                 ;* - AppNote:      AVR053 - Production calibration of the
                 ;*                          RC oscillator
                 ;*
                 ;* - Author:       Atmel Corporation: http://www.atmel.com
                 ;*                 Support email: avr@atmel.com
                 ;*
                 ;* $Name$
                 ;* $Revision: 56 $
                 ;* $RCSfile$
                 ;* $Date: 2006-02-16 17:44:45 +0100 (to, 16 feb 2006) $
                 ;*****************************************************************
                 
                 
                 ;*********************************************************
                 ;*	BIT access anywhere in IO or data space
                 ;*	SETB - SET Bit in IO of data space
                 ;*	CLRB - CLeaR Bit in IO of data space
                 ;*********************************************************
                 
                 .MACRO SETB 		;Arguments: Address, Bit, Register
                 	.if @1>7
                 		.error "Only values 0-7 allowed for Bit parameter"
                 	.endif
                 	.if	@0>0x3F
                 		lds	@2, @0
                 		sbr	@2, (1<<@1)
                 		sts	@0, @2
                 	.else
                 		.if @0>0x1F
                 			in	@2, @0
                 			sbr	@2, (1<<@1)
                 			out	@0, @2
                 		.else
                 			sbi	@0, @1
                 		.endif
                 	.endif
                 .ENDMACRO
                 
                 .MACRO CLRB 		;Arguments: Address, Bit, Register
                 	.if @1>7
                 		.error "Only values 0-7 allowed for Bit parameter"
                 	.endif
                 	.if	@0>0x3F
                 		lds	@2, @0
                 		cbr	@2, (1<<@1)
                 		sts	@0, @2
                 	.else
                 		.if @0>0x1F
                 			in	@2, @0
                 			cbr	@2, (1<<@1)
                 			out	@0, @2
                 		.else
                 			cbi	@0, @1
                 		.endif
                 	.endif
                 .ENDMACRO
                 
                 ;*********************************************************
                 ;*	Bit test anywhere in IO or data space
                 ;*  SKBS : SKip if Bit Set
                 ;*  SKBC : SKip if Bit Cleared
                 ;*********************************************************
                 .MACRO SKBS  		;Arguments: Address, Bit, Register
                 	.if @1>7
                 		.error "Only values 0-7 allowed for Bit parameter"
                 	.endif
                 	.if	@0>0x3F
                 		lds		@2, @0
                 		sbrs	@2, @1
                 	.else
                 		.if @0>0x1F
                 			in		@2, @0
                 			sbrs	@2, @1
                 		.else
                 			sbis	@0, @1
                 		.endif
                 	.endif
                 .ENDMACRO
                 
                 .MACRO SKBC  		;Arguments: Address, Bit, Register
                 	.if @1>7
                 		.error "Only values 0-7 allowed for Bit parameter"
                 	.endif
                 	.if	@0>0x3F
                 		lds		@2, @0
                 		sbrc	@2, @1
                 	.else
                 		.if @0>0x1F
                 			in		@2, @0
                 			sbrc	@2, @1
                 		.else
                 			sbic	@0, @1
                 		.endif
                 	.endif
                 .ENDMACRO
                 
                 ;*********************************************************
                 ;*	Byte access anywhere in IO or data space
                 ;* 	STORE - Store register in IO or data space
                 ;* 	LOAD  - Load register from IO or data space
                 ;*********************************************************
                 
                 .MACRO STORE 		;Arguments: Address, Register
                 	.if	@0>0x3F
                 		sts	@0, @1
                 	.else
                 		out	@0, @1
                 	.endif
                 .ENDMACRO
                 
                 .MACRO LOAD 		;Arguments: Register, Address
                 	.if	@1>0x3F
                 		lds	@0, @1
                 	.else
                 		in	@0, @1
                 	.endif
                 .ENDMACRO
                 .include "common\main.asm"
                 
                 ;*
                 ;* - Description:  Code is part of the RC_Calibration.asm source
                 ;*
                 ;* - File:         main.asm
                 ;* - AppNote:      AVR053 - Production calibration of the
                 ;*                          RC oscillator
                 ;*
                 ;* - Author:       Atmel Corporation: http://www.atmel.com
                 ;*                 Support email: avr@atmel.com
                 ;*
                 ;* $Name$
                 ;* $Revision: 3901 $
                 ;* $RCSfile$
                 ;* $Date: 2008-04-30 14:31:21 +0200 (on, 30 apr 2008) $
                 ;*****************************************************************
                 
                 
                 
                 
                 ;*****************************************************************
                 ;* Definitions
                 ;*****************************************************************
                 ;Register assignments
                 .def	Zero		= r0
                 .def	One			= r1
                 .def	DetectCountL	= r2
                 .def	DetectCountH	= r3
                 .def	OVF_flag_clr	= r4
                 .def	temp		= r16
                 .def	temp1		= r17
                 .def	temp2		= r18
                 .def	temp3		= r19
                 .def	funcDataPass	= r20
                 .def	oscStepSize		= r21
                 .def	oscTrialValue	= r22
                 .def	default_OSCCAL = r23
                 .def	calibPassesLeft		= r24
                 
                 ;Definition of port and pins
                 .equ	PRGR_HANDSHAKE_PIN	= MISO
                 .equ	REF_FREQ_PIN		= MOSI
                 .equ	ISP_PIN_REG		    = CAL_PIN
                 .equ	ISP_PORT_REG		= CAL_PORT
                 .equ	ISP_DDR_REG			= CAL_DDR
                 
                 ;Definition of calibration constants
                 .equ	CCYCLES		= 40		;Number of C-cycles used as calibration period (a decrease is not recommended, increase with care)
                 .equ	TIMING_ERROR	= 2		;Edge detection can be up to 2 CPU cycles delayed
                 .equ	BEST_FIT	= ((((TARGET_FREQ*CCYCLES)*2) /CALIB_CLOCK_FREQ )+1)/2	;Number of CPU cycles in CCYCLES calibration cycles (rounded - worst case rounding error is 0.045%)
                 .equ	LIMIT		= (BEST_FIT*ACCURACY)/1000							;Max allowed CPU cycles off best fit. Truncated to not introduce additional error
                 .equ 	HIGH_LIMIT	=  BEST_FIT + LIMIT - TIMING_ERROR	;CPU cycles count limit, corrected for worstcase timing error
                 .equ 	LOW_LIMIT	=  BEST_FIT - LIMIT + TIMING_ERROR	;CPU cycles count limit, corrected for worstcase timing error
                 
                 .equ	FREQ_WITHIN_LIM = 0x00	;Value = 0
                 .equ	TOO_FAST		= 0x01	;Value = 1
                 .equ	TOO_SLOW		= 0xFF	;Value =-1
                 
                 ; Constant depending on Oscillator version
                 .ifndef OSC_VER
                 .endif
                 .ifdef OSC_VER
                 	.if OSC_VER == 4
                 	.elif OSC_VER == 5
                 	.else
                 		.equ	INITIAL_STEP_SIZE	= 0x80	;OSCCAL tuning range is 8-bit
                 		.equ	NUM_CALIB_PASSES	= 1		;Number of calibration passes.
                 	.endif
                 .endif
                 ;*****************************************************************
                 ;* Vector table
                 ;*****************************************************************
                 .CSEG
                 .org ADDR_START
000000 c009      	rjmp	Reset
                 
                 ;*****************************************************************
                 ;* Main code
                 ;*****************************************************************
                 .CSEG 
                 .org ADDR_MAIN
                 
                 Reset:
00000a 2400      	clr		Zero
00000b e001      	ldi		temp, 0x01
00000c 2e10      	mov		One, temp
                 
                 Init_Stack:
                 ;If the device uses SRAM stack, init it, otherwise don't
                 .ifdef	SP
                 .endif
                 .ifdef SPL
00000d e50f      	ldi		temp, low (RAMEND)
00000e bf0d      	out		SPL, temp
                 	.ifdef SPH
00000f e008      		ldi		temp, high(RAMEND)
000010 bf0e      		out		SPH, temp
                 	.endif
                 .endif
                 
                 Init_interface:
                 ;In case the JTAG pins are used the JTAG interface must be disabled first
                 .ifdef JTAG_CALIB
000011 e800      	ldi	temp, 1<<JTD
000012 bf04      	out	MCUCSR, temp
000013 bf04      	out	MCUCSR, temp
                 .endif	
                 
                 Init_IO:
000014 9aad      	SETB	ISP_PORT_REG, REF_FREQ_PIN, temp		;Enable pull-up
000015 9aac      	SETB	ISP_PORT_REG, PRGR_HANDSHAKE_PIN, temp	;Enable pull-up / output high
000016 9aa4      	SETB	ISP_DDR_REG,  PRGR_HANDSHAKE_PIN, temp	;Configure handshake IO direction
                 
                 
                 CalibrationBegin:
000017 d01f      	rcall	newCalibrateRc
                 
000018 e000      	ldi		temp, high(EEPROM_ADDRESS)
000019 bb0f      	out		EEARH, temp
00001a e000      	ldi		temp, low (EEPROM_ADDRESS)
00001b bb0e      	out		EEARL, temp
                 	
00001c b701      	LOAD	temp, OSCCAL
00001d bb0d      	out		EEDR, temp
                 
00001e e004      	ldi		temp, 1<<EEMWE
00001f bb0c      	out		EECR, temp
000020 e006      	ldi		temp, (1<<EEMWE) | (1<<EEWE)
000021 bb0c      	out		EECR, temp
000022 0000      	nop
                 
                 WaitForEepromReady:
000023 99e1      	sbic	EECR,EEWE
000024 cffe      	rjmp	WaitForEepromReady
                 
                 ;------------------------------------------
                 ; "Calibration-OK" Handshaking
                 ;------------------------------------------
                 
                 .equ	HANDSHAKE_CYCLES	= 8
                 
                 
                 CalibSuccessful:
000025 e018      	ldi		temp1, HANDSHAKE_CYCLES	;Number of togglings in OK-handshake
                 
                 ;	SETB	ISP_PORT_REG, PRGR_HANDSHAKE_PIN, temp		;Configure handshake port
                 ;	SETB	ISP_DDR_REG, PRGR_HANDSHAKE_PIN, temp		;Configure handshake IO direction
                 
000026 e100      	ldi		temp, (1<<PRGR_HANDSHAKE_PIN)				;Init for later use to toggle pin
                 
                 CCS_WaitForPinHigh:
000027 b323      	in		temp2, ISP_PIN_REG
000028 ff25      	sbrs	temp2, REF_FREQ_PIN
000029 cffd      	rjmp	CCS_WaitForPinHigh
                 
00002a b335      	LOAD	temp3, ISP_PORT_REG
00002b 2730       	eor		temp3, temp
                 CCS_WaitForPinLow:
00002c b323      	in		temp2, ISP_PIN_REG
00002d fd25      	sbrc	temp2, REF_FREQ_PIN
00002e cffd      	rjmp	CCS_WaitForPinLow							;Synchronize to C-clock
00002f bb35       	STORE	ISP_PORT_REG, temp3
                  
                 Handshake_loop:
000030 951a      	dec	temp1
000031 f7a9      	brne	CCS_WaitForPinHigh
000032 0000      	nop
                 
                 StopHere:
                 ;In case the JTAG pins are used the JTAG interface must be reenabled again
                 .ifdef JTAG_CALIB
000033 e70f      	ldi	temp, ~(1<<JTD)
000034 bf04      	out	MCUCSR, temp
000035 bf04      	out	MCUCSR, temp
                 .endif	
                 
                 ;To test the frequency of the device enable the test code below
                 ; 	SBI_GEN 	ISP_DDR_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" high
                 ;	SBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	CBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	SBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	CBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	CBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	CBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	CBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	CBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	CBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	CBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	CBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 ;	CBI_GEN 	ISP_PORT_REG,PRGR_HANDSHAKE_PIN, temp	;Drive "MISO" low
                 EOP:
000036 cfff      	rjmp 	EOP             ;Finally, wait here until ISP programmer reprograms the device
                  
                 ;*****************************************************************
                 ;* Calibration function:
                 ;*
                 ;* Make a binary search to find the best OSCCAL value. If the result
                 ;* of the binary search is not within the frequency limits the 4 
                 ;* nearest OSCCAL values are tested to find match.
                 ;*
                 ;*****************************************************************
                 newCalibrateRc:
000037 2766      	clr	oscTrialValue
000038 e080      	ldi calibPassesLeft, NUM_CALIB_PASSES - 1
                 
                 	; Temporary fix of JTAGICEmkII clock generation bug
000039 0000      	INTERFACE_BUGFIX
                 
                 BinSearch:
00003a e850      	ldi		oscStepSize, INITIAL_STEP_SIZE	; MSB of OSCCAL tuning range set (128 or 64 depending on osc version)
00003b 0f65      	add		oscTrialValue, oscStepSize
                 BinSearchLoop:
00003c bf61      	STORE	OSCCAL, oscTrialValue	;Device specific macro used due to device differences
00003d 0000      	nop
00003e 0000      	nop
00003f d031      	rcall	DetermineClockSpeed
000040 3040      	cpi		funcDataPass, FREQ_WITHIN_LIM		;If freq OK
000041 f169      	breq	FreqHit								; then end binary search
000042 9556      	lsr		oscStepSize							; ELSE continue search
000043 2355      	tst		oscStepSize
                 
000044 f031      	breq	TryNeighbourghhoodValues				;If oscStepSize is 0 (and no hit is made), try neighbourgh values
000045 2f05      	mov		temp,oscStepSize
000046 3041      	cpi		funcDataPass, TOO_FAST
000047 f409      	brne	AddStep
                 NegateNextStep:
000048 9501      	neg		temp		
                 AddStep:
000049 0f60      	add		oscTrialValue, temp
00004a cff1      	rjmp	BinSearchLoop
                 
                 TryNeighbourghhoodValues:
                 ;test the nearest 3 OSCCAL values to find match (don't test the one just tested)
                 ; One-step-away neighbor
00004b 3041      	cpi		funcDataPass, TOO_FAST
00004c f011      	breq	DownstairsNeighbor
00004d e051      	ldi		oscStepSize, 1
00004e c001      	rjmp	AddOscStep
                 DownstairsNeighbor:
00004f ef5f      	ldi		oscStepSize, -1
                 AddOscStep:
000050 0f65      	add		oscTrialValue, oscStepSize
000051 bf61      	STORE	OSCCAL, oscTrialValue	;Device specific macro used due to device differences
000052 0000      	nop
000053 0000      	nop
000054 d01c      	rcall	DetermineClockSpeed
000055 3040      	cpi		funcDataPass, FREQ_WITHIN_LIM		;If freq OK
000056 f0c1      	breq	FreqHit								; then end binary search
                 ;Closest two-step-away neighbor (in same direction as previous step)
000057 0f65      	add		oscTrialValue, oscStepSize
000058 bf61      	STORE	OSCCAL, oscTrialValue	;Device specific macro used due to device differences
000059 0000      	nop
00005a 0000      	nop
00005b d015      	rcall	DetermineClockSpeed
00005c 3040      	cpi		funcDataPass, FREQ_WITHIN_LIM		;If freq OK
00005d f089      	breq	FreqHit								; then end binary search
                 ;Other two-step-away neighbor (4 steps in the opposire direction)
00005e 9551      	neg		oscStepSize		;Negate the step (and thereby the direction)
00005f 0f55      	lsl		oscStepSize		;"Multiply" by 2
000060 0f55      	lsl		oscStepSize		;"Multiply" by 2 - in total 4
000061 0f65      	add		oscTrialValue, oscStepSize
000062 bf61      	STORE	OSCCAL, oscTrialValue	;Device specific macro used due to device differences
000063 0000      	nop
000064 0000      	nop
000065 d00b      	rcall	DetermineClockSpeed
000066 3040      	cpi		funcDataPass, FREQ_WITHIN_LIM		;If freq OK
000067 f039      	breq	FreqHit								; then end binary search												
                 												
                 CalibPassCompleted:							;One calibration pass is complete, check if one more pass in upper half of OSCCAL should be performed
000068 2388      	tst 	calibPassesLeft
000069 f019      	breq	CalibrationFailure				;If all calibration passes are complete, and no OSCCAL value is found, the calibration failed
00006a 958a      	dec		calibPassesLeft
00006b e860      	ldi		oscTrialValue, 0x80
00006c cfcd      	rjmp 	BinSearch
                 
                 CalibrationFailure:
00006d 9aa4      	SETB	ISP_DDR_REG,PRGR_HANDSHAKE_PIN, temp		;Drive the MISO line low to signal failure
00006e cfc4      	rjmp	StopHere							;jmp to the end of the calibration code
                 		
                 FreqHit:
00006f 2f46      	mov		funcDataPass, oscTrialValue			;Pass on the final OSCCAL value
000070 9508      	ret
                 
                 ;*****************************************************************
                 ;* TestClock function:
                 ;*
                 ;* Uses TimerCounter0 and OVF to time 40 calibration clock cycles.
                 ;* Returns the result (TOO_FAST, TOO_SLOW) in funcDataPass
                 ;*****************************************************************
                 DetermineClockSpeed:
                 
                 Prepare_Detection:
000071 2433      	clr		detectCountH
000072 e001      	ldi		temp, (1<<TOV0)
000073 2e40      	mov		OVF_flag_clr, temp
000074 e206      	ldi 	temp, (CCYCLES - 2)
000075 be02      	out		TCNT0, Zero
000076 e011      	ldi		temp1, (0<<CS02) | (0<<CS01) | (1<<CS00)	;Warning - this depend on sys clock
                 	;	out		TCCR0, temp
                 
                 WaitForPinHigh:
000077 9b9d      	SKBS	ISP_PIN_REG, REF_FREQ_PIN, temp3
000078 cffe      	rjmp	WaitForPinHigh		; Will not get here before REF_FREQ_PIN starts toggling
                 
                 WaitForPinLow:
000079 999d      	SKBC	ISP_PIN_REG, REF_FREQ_PIN, temp3
00007a cffe      	rjmp	WaitForPinLow		; Will not get here before REF_FREQ_PIN starts toggling
00007b bf13      	out		TCCR0,temp1
                 
                 ; ---- cycle CC01 ----
                 DetectHighCC01:
00007c b728      	in		temp2, TIFR
00007d ff20      	sbrs	temp2, TOV0
00007e c002      	rjmp	DetectHighLoopCC01
00007f 0c31      	add		detectCountH, One
000080 be48      	out		TIFR, OVF_flag_clr
                 DetectHighLoopCC01:
000081 9b9d      	SKBS	ISP_PIN_REG, REF_FREQ_PIN, temp3
000082 cffe      	rjmp	DetectHighLoopCC01
                 
                 DetectLowCC01:
000083 b728      	in		temp2, TIFR
000084 ff20      	sbrs	temp2, TOV0
000085 c002      	rjmp	DetectLowLoopCC01
000086 0c31      	add		detectCountH, One
000087 be48      	out		TIFR, OVF_flag_clr
                 DetectLowLoopCC01:
000088 999d      	SKBC	ISP_PIN_REG, REF_FREQ_PIN, temp3
000089 cffe      	rjmp	DetectLowLoopCC01
                 
                 ; ---- cycle CC02 to CC39 implemented as loop----
                 DetectHighCCxx:
00008a b728      	in		temp2, TIFR
00008b ff20      	sbrs	temp2, TOV0
00008c c002      	rjmp	DetectHighLoopCCxx
00008d 0c31      	add		detectCountH, One
00008e be48      	out		TIFR, OVF_flag_clr
                 DetectHighLoopCCxx:
00008f 9b9d      	SKBS	ISP_PIN_REG, REF_FREQ_PIN, temp3
000090 cffe      	rjmp	DetectHighLoopCCxx
                 
                 DetectLowCCxx:
000091 b728      	in		temp2, TIFR
000092 ff20      	sbrs	temp2, TOV0
000093 c002      	rjmp	DetectLowLoopCCxx
000094 0c31      	add		detectCountH, One
000095 be48      	out		TIFR, OVF_flag_clr
                 DetectLowLoopCCxx:
000096 999d      	SKBC	ISP_PIN_REG, REF_FREQ_PIN, temp3
000097 cffe      	rjmp	DetectLowLoopCCxx
                 
000098 950a      	dec		temp
000099 f781      	brne	DetectHighCCxx
                 
                 ; ---- cycle CC40 ----
                 DetectHighCC40:
00009a b728      	in		temp2, TIFR
00009b ff20      	sbrs	temp2, TOV0
00009c c002      	rjmp	DetectHighLoopCC40
00009d 0c31      	add		detectCountH, One
00009e be48      	out		TIFR, OVF_flag_clr
                 DetectHighLoopCC40:
00009f 9b9d      	SKBS	ISP_PIN_REG, REF_FREQ_PIN, temp3
0000a0 cffe      	rjmp	DetectHighLoopCC40
                 
                 DetectLowCC40:
0000a1 b728      	in		temp2, TIFR
0000a2 ff20      	sbrs	temp2, TOV0
0000a3 c002      	rjmp	DetectLowLoopCC40
0000a4 0c31      	add		detectCountH, One
0000a5 be48      	out		TIFR, OVF_flag_clr
                 DetectLowLoopCC40:
0000a6 999d      	SKBC	ISP_PIN_REG, REF_FREQ_PIN, temp3
0000a7 cffe      	rjmp	DetectLowLoopCC40
                 
                 Detect_End:
0000a8 be03      	out		TCCR0, Zero		;Stop timer
                 CountLastOVF:
0000a9 b728      	in		temp2, TIFR
0000aa ff20      	sbrs	temp2, TOV0
0000ab c004      	rjmp	MergeTimerHighAndLow
0000ac 9408      	sec
0000ad 1c30      	adc		detectCountH, Zero
0000ae 7021      	andi	temp2, (1<<TOV0)
0000af bf28      	out		TIFR, temp2	
                 MergeTimerHighAndLow:
0000b0 b622      	in		detectCountL, TCNT0
                 
                 CompareToLimits:
0000b1 e715      	ldi		temp1, low(HIGH_LIMIT)
0000b2 e226      	ldi		temp2, high(HIGH_LIMIT)
0000b3 1621      	cp		detectCountL, temp1
0000b4 0632      	cpc		detectCountH, temp2
0000b5 f43c      	brge   	TooFast				;branch if detect >= HIGH_LIMIT (system clock too fast, since count is too high)
                 
0000b6 e31f      	ldi		temp1, low(LOW_LIMIT)
0000b7 e226      	ldi		temp2, high(LOW_LIMIT)
0000b8 1512      	cp		temp1,detectCountL
0000b9 0523      	cpc		temp2, detectCountH
0000ba f424      	brge   	TooSlow				;branch if detect <= LOW_LIMIT (system clock too slow, since count is too low)
                 RightInTheEye:
0000bb e040      	ldi		funcDataPass, FREQ_WITHIN_LIM
0000bc 9508      	ret
                 TooFast:
0000bd e041      	ldi		funcDataPass, TOO_FAST
0000be 9508      	ret
                 TooSlow:
0000bf ef4f      	ldi		funcDataPass, TOO_SLOW	;TOO_SLOW is a value and not a bitmask -> funcDataPass = 0x00
0000c0 9508      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32A" register use summary:
r0 :   4 r1 :   7 r2 :   3 r3 :  10 r4 :   7 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  31 r17:   8 r18:  24 r19:   3 r20:  10 r21:  13 r22:  12 r23:   0 
r24:   3 r25:   0 r26:   0 r27:   0 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 13 out of 35 (37.1%)

"ATmega32A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :  11 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   7 brge  :   2 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   3 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   3 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   2 
cpi   :   6 cpse  :   0 dec   :   3 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  12 inc   :   0 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  26 lds   :   0 lpm   :   0 lsl   :   2 
lsr   :   1 mov   :   4 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   2 nop   :  11 or    :   0 ori   :   0 out   :  26 pop   :   0 
push  :   0 rcall :   5 ret   :   4 reti  :   0 rjmp  :  24 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   4 sbic  :   5 sbis  :   4 
sbiw  :   0 sbr   :   0 sbrc  :   1 sbrs  :   8 sec   :   1 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   2 wdr   :   0 
Instructions used: 30 out of 113 (26.5%)

"ATmega32A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000182    368      0    368   32768   1.1%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
